#+TITLE: 适用于Org和Clojure的Emacs配置
#+AUTHOR: Shi Tianshu
* MacOS 的一些配置
使用 =option= 作为 =Meta= key.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'meta))
#+END_SRC

处理执行文件在 =PATH= 下，却找不到的情况。
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (use-package exec-path-from-shell
      :init
      (setq exec-path-from-shell-check-startup-files nil)
      (exec-path-from-shell-initialize)))
#+END_SRC

* 样式设置
** 界面透明
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(100 . 90))
  (add-to-list 'default-frame-alist '(alpha . (100 . 90)))
#+END_SRC
** 字体设置
*** 设置代码中使用的字体
#+BEGIN_SRC emacs-lisp
  (set-default-font "Courier-15")
#+END_SRC
*** 配置Org-mode使用的字体
使用一个中英文等宽的字体。
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
            (face-remap-add-relative 'default
                                       :family "Iosevka Slab"
                                       :height 130)))
#+END_SRC
** 主题
#+BEGIN_SRC emacs-lisp
  (use-package minimal-theme
    :custom-face
    (default ((t (:foreground "gray20"))))
    (font-lock-builtin-face ((t (:foreground "gray30" :bold t))))
    :init
    (load-theme 'minimal-light t)
    (set-face-attribute 'fringe nil
                        :foreground (face-foreground 'default)
                        :background (face-background 'default)))
#+END_SRC
** 隐藏mode-line
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format nil)
#+END_SRC
* 基本设置
** 窗口边距
#+BEGIN_SRC emacs-lisp
  (setq-default left-margin-width 3 right-margin-width 3)
  (set-window-buffer nil (current-buffer))
#+END_SRC
** 光标闪烁
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 1)
  (add-hook 'prog-mode-hook
            (lambda () (set-default 'cursor-type '(bar . 2))))
#+END_SRC
** 设置GC的阈值
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 50000000)
#+END_SRC
** 设置一个快捷键用来重新加载配置文件
#+BEGIN_SRC emacs-lisp
  (defun user/load-configuration ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/README.org"))

  (bind-key "C-x p" 'user/load-configuration)
#+END_SRC
** 去掉窗体中不必要的地方
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format " %* %b %I")
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    ;; (menu-bar-mode 1)
    (scroll-bar-mode -1))
#+END_SRC

** 使用IBuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key [remap list-buffers] 'ibuffer)
#+END_SRC
** Dvorak
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-@") help-map)
  (global-set-key (kbd "C-h") ctl-x-map)
#+END_SRC
** scratch初始化信息
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message ";; ~=[,,_,,]:3")
#+END_SRC
** 保存时删除空行
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** 编码
始终使用UTF-8编码。
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8-unix
        default-file-name-coding-system 'utf-8-unix
        default-keyboard-coding-system 'utf-8-unix
        default-process-coding-system '(utf-8-unix . utf-8-unix)
        default-sendmail-coding-system 'utf-8-unix
        default-terminal-coding-system 'utf-8-unix)
#+END_SRC
** 关闭fringe
#+BEGIN_SRC emacs-lisp
  ;; (fringe-mode t)
#+END_SRC
** 末尾需要一个空行
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
** 选中时可以按键删除
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC
** 备份文件
把备份文件放在 =~/.backup= 目录下，并且存更多的版本。
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  (setq backup-by-copying t)

  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

** 对齐代码
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x \\") #'align-regexp)
#+END_SRC
** 显示文件大小
#+BEGIN_SRC emacs-lisp
  (size-indication-mode t)
#+END_SRC
** 平滑滚动
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC
** 高亮当前行
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC
** 在需要确认yes或no的地方使用y或n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** 关闭Tooltip
#+BEGIN_SRC emacs-lisp
  (tooltip-mode -1)
#+END_SRC
** 始终开启列号
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC
** 使用空格而不是TAB
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** 高亮匹配的括号。
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** 行高
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 5)
#+END_SRC
** 文件在Emacs之外发生修改时自动重新加载
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC
** 空行标志
#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines nil)
#+END_SRC
** 使用ESC做退出按键
#+BEGIN_SRC emacs-lisp
  (bind-key "<escape>" 'keyboard-escape-quit global-map)
#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
  (defun user/eshell-init-keys ()
    (bind-key "C-l" 'eshell/clear eshell-mode-map))
  (add-hook 'eshell-mode-hook #'user/eshell-init-keys)
#+END_SRC
** 鼠标处理
#+BEGIN_SRC emacs-lisp
  (bind-key "<mouse-3>" 'kill-ring-save)
  (bind-key "<mouse-4>" 'yank)
#+END_SRC
** HideShow
#+BEGIN_SRC emacs-lisp
  (use-package hideshowvis)
  (defun user/init-hs-mode ()
    (hs-minor-mode t))
  (add-hook 'prog-mode-hook #'user/init-hs-mode)
  (bind-key "C-<return>" 'hs-toggle-hiding prog-mode-map)
#+END_SRC
* 基础插件
** Undo&Redo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode))
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :init
    (dolist (hook '(prog-mode-hook text-mode-hook))
      (add-hook hook #'whitespace-mode))
    (add-hook 'before-save-hook #'whitespace-cleanup)
    :custom-face
    (whitespace-line ((t (:background nil :foreground "red"))))
    :config
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face tabs empty trailing lines-tail)))
#+END_SRC
** 优化复制功能
| 按键  | 功能           |
|-------+----------------|
| M-w d | 复制顶级表达式 |
| M-w l | 复制当前表达式 |
| M-w w | 复制当前词     |
| M-w s | 复制当前符号   |
#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :init
    (global-set-key [remap kill-ring-save] 'easy-kill))
#+END_SRC
** 查找替换
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :init
    (global-anzu-mode 1)
    (bind-key "M-#" 'anzu-query-replace-at-cursor)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+END_SRC
** 窗口管理
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :custom-face
    (aw-leading-char-face ((t (:height 400 :foreground "red"))))
    :bind
    (("C-h C-h" . ace-window))
    :init
    (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n)))
#+END_SRC
** 目录树
#+BEGIN_SRC emacs-lisp
  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
	   (ignore-errors
	     ;;; Pick one: projectile or find-file-in-project
	     ; (projectile-project-root)
	     (ffip-project-root)))

	  (file-name (buffer-file-name))
	  (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
	       (neo-global--window-exists-p))
	  (neotree-hide)
	(progn
	  (neotree-show)
	  (if project-dir
	      (neotree-dir project-dir))
	  (if file-name
	      (neotree-find file-name))))))

  (use-package neotree
    :ensure t
    :init
    (setq neo-theme
	  (if (display-graphic-p)
	      'ascii
	    'arrow))
    (setq neo-window-fixed-size nil)
    (setq neo-window-width 30)
    :bind
    (("C-h t" . neotree-project-dir-toggle)))
#+END_SRC
** Expand Region: 快速选择
使用[[https://github.com/magnars/expand-region.el][expand-region]] 插件。
| 按键 | 功能         |
|------+--------------|
| C-=  | 扩展选择范围 |

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    (("C-=" . er/expand-region)))
#+END_SRC

** Multiple Cursors: 多光标编辑
使用[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] 插件。
| 按键 | 功能                                 |
|------+--------------------------------------|
| C->  | 将光标放置在下一个出现当前内容的位置 |
| C-<  | 将光标放置在上一个出现当前内容的位置 |
| C-\  | 跳过这个位置                         |

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    (("C->" . mc/mark-next-like-this)
     ("C-\\" . mc/skip-to-next-like-this)
     ("C-<" . mc/mark-previous-like-this)
     ("<escape>" . mc/keyboard-quit))
    :init
    (setq mc/always-run-for-all t))
#+END_SRC

** Company: 代码补全前端
使用[[https://github.com/company-mode/company-mode][company]] 插件。
| 按键             | 功能   |
|------------------+--------|
| C-n (补全菜单中) | 下一项 |
| C-p (补全菜单中) | 上一项 |

#+BEGIN_SRC emacs-lisp
  (defun user/company-clojure-init ()
    (bind-key "TAB" 'company-indent-or-complete-common clojure-mode-map)
    (bind-key "<tab>" 'company-indent-or-complete-common clojure-mode-map))

  (defun user/company-ocaml-init ()
    (bind-key "TAB" 'company-indent-or-complete-common tuareg-mode-map)
    (bind-key "<tab>" 'company-indent-or-complete-common tuareg-mode-map))

  (defun user/company-cider-repl-init ()
    (bind-key "<tab>" 'company-complete-common cider-repl-mode-map))

  (defun user/company-eshell-init ()
    (bind-key "<tab>" 'company-complete-common eshell-mode-map))

  (defun user/company-elisp-init ()
    (bind-key "TAB" 'company-indent-or-complete-common emacs-lisp-mode-map)
    (bind-key "<tab>" 'company-indent-or-complete-common emacs-lisp-mode-map))

  (use-package company
    :bind
    (:map company-active-map
          ("<escape>" . company-abort)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :init
    (add-hook 'emacs-lisp-mode-hook #'user/company-elisp-init)
    (add-hook 'clojure-mode-hook #'user/company-clojure-init)
    (add-hook 'eshell-mode-hook #'user/company-eshell-init)
    (add-hook 'cider-repl-mode-hook #'user/company-cider-repl-init)
    (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
    (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
    (setq company-idle-delay t)
    (global-company-mode))
#+END_SRC

** Projectile: 项目文件导航
使用[[https://github.com/bbatsov/projectile][projectile]] 插件。
| 按键      | 功能             |
|-----------+------------------|
| C-c p f   | 切换项目中的文件 |
| C-c p p   | 切换项目         |
| C-c p s s | 项目中AG搜索     |

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer nil
    :init
    (setq projectile-keymap-prefix (kbd "C-z"))
    (projectile-global-mode 1))
#+END_SRC

** Highlight Symbol: 高亮文档中光标处的符号
使用[[https://github.com/nschum/highlight-symbol.el][highlight-symbol]] 插件。
| 按键 | 功能             |
|------+------------------|
| M-p  | 上一次出现的位置 |
| M-n  | 下一次出现的位置 |

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :bind
    (("M-p" . highlight-symbol-prev)
     ("M-n" . highlight-symbol-next))
    :init
    (add-hook 'prog-mode-hook #'highlight-symbol-mode))
#+END_SRC
** IVY 补全
相比 =ido= 和 =helm=, [[https://github.com/abo-abo/swiper][ivy]] 更简单和快速。
| 按键              | 功能                             |
|-------------------+----------------------------------|
| C-c g             | GIT项目中的文件搜索              |
| C-c G             | GIT项目中的文件内容搜索          |
| C-c m             | IMENU                            |
| C-c a             | AG搜索                           |
| C-M-j(查找文件中) | 提交当前内容，而不从候选项中选择 |

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)

  (use-package counsel
    :ensure t)

  (use-package counsel-projectile
    :bind
    (:map projectile-mode-map
          ("C-z a" . counsel-projectile-ag))
    :init
    (setq projectile-completion-system 'ivy))

  (use-package ivy
    :bind
    (("C-c g" . counsel-git)
     ("C-c G" . counsel-git-grep)
     ("C-s" . swiper)
     ("C-c m" . counsel-imenu)
     ("C-c A" . counsel-ag)
     :map ivy-minibuffer-map
     ("<tab>" . ivy-alt-done)
     ("<escape>" . minibuffer-keyboard-quit)
     ("C-r" . counsel-expression-history))
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-use-selectable-prompt t)
    (ivy-mode 1)
    :bind
    (("<C-escape>" . ivy-resume)))
#+END_SRC
* RESTCLIENT
#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC
* GIT
[[https://magit.vc/][Magit]] 提供了通过Emacs执行 =Git= 命令的接口。使用快捷键 =C-x M-g= 打开菜单。
#+BEGIN_SRC emacs-lisp
  (unbind-key "C-z" global-map)
  (use-package magit
    :bind
    (("C-;" . magit-dispatch-popup))
    :init
    (setq magit-completing-read-function 'ivy-completing-read)
    (global-magit-file-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode t)
    (diff-hl-dired-mode t))
#+END_SRC

* Java
#+BEGIN_SRC emacs-lisp
  (use-package autodisass-java-bytecode
    :ensure t
    :defer t)

  (use-package google-c-style
    :defer t
    :ensure t
    :commands
    (google-set-c-style))

  (use-package meghanada
    :defer t
    :init
    (add-hook 'java-mode-hook
              (lambda ()
                (google-set-c-style)
                (google-make-newline-indent)
                (meghanada-mode t)
                (smartparens-mode t)
                (rainbow-delimiters-mode t)
                (highlight-symbol-mode t)
                (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))

    :config
    (use-package realgud
      :ensure t)
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq c-basic-offset 2)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")
    :bind
    (:map meghanada-mode-map
          ("C-S-t" . meghanada-switch-testcase)
          ("M-RET" . meghanada-local-variable)
          ("M-r" . meghanada-reference)
          ("M-t" . meghanada-typeinfo))
    :commands
    (meghanada-mode))
#+END_SRC
* Clojure 开发
** Clojure相关
| 按键    | 功能                      |
|---------+---------------------------|
| C-c SPC | 格式化当前TOP-LEVEL表达式 |
*** Clojure-mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :config
    (define-clojure-indent
      (defui  '(1 :form :defn))
      (assoc  '(1))
      (match  '(1)))
    :custom-face
    (cider-result-overlay-face ((t (:background "gray80" :foreground "white"))))
    (cider-fringe-good-face ((t (:foreground "black"))))
    :init
    (setq cider-overlays-use-font-lock nil)
    (add-hook 'clojure-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook #'subword-mode))
#+END_SRC
*** 处理括号和逗号的颜色
#+BEGIN_SRC emacs-lisp
  (defface dim-face
     '((((class color) (background dark))
        (:foreground "grey40"))
       (((class color) (background light))
        (:foreground "grey70")))
     "dim face for paren and comma")

  (defun user/dim-face-fontify-search (limit)
    (let ((result nil)
          (finish nil)
          (bound (+ (point) limit)))
      (while (not finish)
        (if (re-search-forward "\\(\\s(\\|\\s)\\|,\\)" bound t)
            (setq result (match-data)
                  finish t)
          (setq finish t)))
      result))

  (defun user/hook-dim ()
    (font-lock-add-keywords
     nil '((user/dim-face-fontify-search . 'dim-face))))

  (add-hook 'clojure-mode-hook #'user/hook-dim)
#+END_SRC
*** Cider: Clojure交互式开发环境
[[https://cider.readthedocs.io/en/latest/][Cider的使用文档]]
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :bind
    (:map cider-mode-map
          ("C-c <tab>" . cider-inspect-last-result))
    :init
    (setq cider-prompt-for-symbol nil)
    (setq cider-lein-command "/usr/local/bin/lein")
    (setq cider-boot-command "/usr/local/bin/boot")
    (setq cider-cljs-lein-repl
          "(do (require 'shadow.cljs.devtools.api) (require 'shadow.cljs.devtools.server) (shadow.cljs.devtools.server/start!) (shadow.cljs.devtools.api/watch :app) (shadow.cljs.devtools.api/nrepl-select :app))")
    ;; (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
    (setq nrepl-use-ssh-fallback-for-remote-hosts nil)
    (setq cider-use-overlays 'both))
#+END_SRC

*** clj-refactor: 重构工具
[[https://github.com/clojure-emacs/clj-refactor.el/wiki][clj-refactor的功能见这里]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    :bind
    (("C-*" . yas-expand))
    :config
    (unbind-key "<tab>" yas-minor-mode-map)
    (unbind-key "TAB" yas-minor-mode-map))

  (use-package clj-refactor
    :init
    (cljr-add-keybindings-with-prefix "C-,")
    (add-hook 'clojure-mode-hook #'clj-refactor-mode)
    (add-hook 'clojure-mode-hook #'yas-minor-mode))
#+END_SRC

** Lisp 基础
*** 彩虹括号
#+BEGIN_SRC emacs-lisp
  ;; (use-package rainbow-delimiters
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Paredit: S表达式操作
#+BEGIN_SRC emacs-lisp
  (defun user/paredit-delete ()
    (interactive)
    (if (region-active-p)
        (call-interactively 'delete-region)
      (call-interactively 'paredit-backward-delete)))

  (use-package paredit
    :ensure t
    :bind
    (("M-s" . paredit-slice-sexp)
     ("C-)" . paredit-forward-slurp-sexp)
     ("C-}" . paredit-forward-barf-sexp)
     ("M-r" . paredit-raise-sexp)
     ("<backspace>" . user/paredit-delete))
    :init
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
    (add-hook 'cider-repl-mode-hook #'paredit-mode)
    (add-hook 'clojure-mode-hook #'paredit-mode))
#+END_SRC

* Org相关
** 执行脚本
#+BEGIN_SRC emacs-lisp
  (require 'ob-emacs-lisp)
  (require 'ob-python)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (clojure . t)
     (emacs-lisp . t)
     (python . t)))
#+END_SRC
** 美化符号
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** 导出markdown
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-src-fontify-natively t)
    (setq org-hide-leading-stars t)
    (setq org-log-into-drawer t)
    (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
    (add-hook 'org-mode-hook
        (lambda ()
          (setq org-src-ask-before-returning-to-edit-buffer nil)
          (org-indent-mode 1))))
  (use-package org-plus-contrib)
#+END_SRC
* 隐藏多余的Lighter
#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :init
      (diminish 'highlight-parentheses-mode)
      (diminish 'highlight-symbol-mode)
      (diminish 'paredit-mode)
      (diminish 'ivy-mode)
      (diminish 'company-mode)
      (diminish 'yas-minor-mode)
      (diminish 'git-gutter-mode)
      (diminish 'eldoc-mode)
      (diminish 'auto-revert-mode)
      (diminish 'subword-mode)
      (diminish 'hs-minor-mode)
      (diminish 'hideshowvis-minor-mode)
      (diminish 'clj-refactor-mode)
      (diminish 'anzu-mode)
      (diminish 'undo-tree-mode))
#+END_SRC
* 窗口边框
#+BEGIN_SRC emacs-lisp
  (use-package window-divider-mode
    :no-require t
    :ensure nil
    :custom-face
    (window-divider ((t (:foreground "gray80"))))
    :init
    (setq window-divider-default-bottom-width 1)
    (setq window-divider-default-places (quote bottom-only))
    (window-divider-mode 1))
#+END_SRC
